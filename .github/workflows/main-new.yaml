name: Unity CI/CD - Main push (Format check, Test Runner)

on:
  push:
    branches: [ "main" ]
    
jobs:
  format:
    name: Format check 🗒️
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Installing .NET...
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x
      - name: Installing dependencies...
        run: dotnet tool install -g csharpier
      - name: Restoring dependencies...
        run: dotnet tool restore
      - name: Running format...
        run: dotnet csharpier --check "projekt/Assets"
  tags:
    needs: format
    name: Version tag 🏷️
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set version and tag...
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          default_bump: minor
  tests:
    needs: tags
    name: Test runner 🧪
    runs-on: ubuntu-latest
    steps:
      - name: Checking out...
        uses: actions/checkout@v4
        with:
          lfs: true
      - name: Caching Library...
        uses: actions/cache@v3
        with:
          path: projekt/Library
          key: Library-projekt
          restore-keys: |
            Library-
      - name: Running tests... 
        uses: game-ci/unity-test-runner@v4
        id: tests
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          projectPath: projekt
          testMode: editmode
          artifactsPath: editmode-artifacts
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          checkName: Test results
          coverageOptions: 'generateAdditionalMetrics;generateHtmlReport;generateBadgeReport;assemblyFilters:+my.assembly.*'
      - uses: actions/upload-artifact@v3
        name: Uploading artifacts...
        if: always()
        with:
          name: Test results - artifacts
          path: ${{ steps.tests.outputs.artifactsPath }}
  call-build:
    needs: call-tests
    name: Build and release 🏗️
    runs-on: ubuntu-latest
      strategy:
        fail-fast: false
        matrix:
          projectPath:
            - projekt
          unityVersion:
            - 2022.3.11f1
          targetPlatform:
            - StandaloneWindows64
  
      steps:
        - uses: actions/checkout@v4
          with:
            fetch-depth: 0
            lfs: true
        - uses: actions/cache@v3
          with:
            path: ${{ matrix.projectPath }}/Library
            key:
              Library-${{ matrix.projectPath }}-${{ matrix.targetPlatform }}-${{
              hashFiles(matrix.projectPath) }}
            restore-keys: |
              Library-${{ matrix.projectPath }}-${{ matrix.targetPlatform }}-
              Library-${{ matrix.projectPath }}-
              Library-
        - uses: game-ci/unity-builder@v4
          env:
            UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
            UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
            UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          with:
            projectPath: ${{ matrix.projectPath }}
            unityVersion: ${{ matrix.unityVersion }}
            targetPlatform: ${{ matrix.targetPlatform }}
            customParameters: '-myParameter myValue -myBoolean -ThirdParameter andItsValue'
        - name: Get version tag
          run: echo "LAST_TAG=$(git describe --tags `git rev-list --tags --max-count=1`)" >> $GITHUB_ENV
        - uses: actions/upload-artifact@v3
          with:
            name: Build
            path: build
        - name: Downloading build artifacts...
          uses: actions/download-artifact@v3
          with:
            name: Build
        - name: Creating Release...
          id: create_release
          uses: actions/create-release@v1
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            tag_name: ${{ env.LAST_TAG }}
            release_name: SCADA_${{ env.LAST_TAG }}
            draft: false
            prerelease: false
