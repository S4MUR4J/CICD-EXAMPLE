name: Unity CI/CD - Main push (Format check, Test Runner)

on:
  push:
    branches: [ "main" ]
    
jobs:
  format:
    name: Format check üóíÔ∏è
    runs-on: ubuntu-latest
    defaults:
      run: 
        working-directory: "projekt/Assets"
    steps:
      - uses: actions/checkout@v4
      - name: Installing .NET...
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
      - name: Installing dependencies...
        run: dotnet tool install -g csharpier
      - name: Restoring dependencies...
        run: dotnet tool restore
      - name: Running format...
        run: dotnet csharpier --check
  tests:
    name: Test runner üß™
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true
      - uses: actions/cache@v3
        with:
          path: projekt/Library
          key: Library-projekt
          restore-keys: |
            Library-
      - uses: game-ci/unity-test-runner@v4
        id: tests
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          projectPath: projekt
          testMode: editmode
          artifactsPath: editmode-artifacts
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          checkName: editMode Test Results
          coverageOptions: 'generateAdditionalMetrics;generateHtmlReport;generateBadgeReport;assemblyFilters:+my.assembly.*'
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: Test results for editMode
          path: ${{ steps.tests.outputs.artifactsPath }}
  build:
    name: Build project üèóÔ∏è
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        projectPath:
          - projekt
        unityVersion:
          - 2019.4.1f1
          - 2020.2.1f1
        targetPlatform:
          - StandaloneOSX # Build a macOS standalone.

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true

      - uses: actions/cache@v3
        with:
          path: ${{ matrix.projectPath }}/Library
          key:
            Library-${{ matrix.projectPath }}-${{ matrix.targetPlatform }}-${{
            hashFiles(matrix.projectPath) }}
          restore-keys: |
            Library-${{ matrix.projectPath }}-${{ matrix.targetPlatform }}-
            Library-${{ matrix.projectPath }}-
            Library-

      - uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          projectPath: ${{ matrix.projectPath }}
          unityVersion: ${{ matrix.unityVersion }}
          targetPlatform: ${{ matrix.targetPlatform }}
          customParameters: '-myParameter myValue -myBoolean -ThirdParameter andItsValue'

      - uses: actions/upload-artifact@v3
        with:
          name: Build
          path: build
  Unity_CICD_MAIN:
    runs-on: ubuntu-latest
    steps:
      - name: "Checking out"
        uses: actions/checkout@v3
      - name: "Calling format check..."
        uses: ./.github/workflows/basic/format.yml
      - name: "Calling test runner..."
        uses: ./.github/workflows/basic/test.yml
